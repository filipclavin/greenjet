import { Stage, Layer, Group, Path, Rect, Text, Circle } from 'react-konva'
import { useContext } from 'react/cjs/react.development'
import seedrandom from 'seedrandom'
import { Context } from '../Context'

const SeatsRender = ({ seats, setSeats, random }) => {

    const { passengers } = useContext(Context)

    //start of business class
    const getBusinessRow = (seed, rowNum) => {
        const businessSeatLetters = ['A', 'B', '', 'C', 'D']
        const businessRow = []
        let rand

        for (let i = 0; i < 5; i++) {
            rand = seedrandom(seed + i.toString())()

            businessRow.push(
                i !== 2 &&
                <Group
                    x={3.63 + (3.85 * i) + (13.6 * i)}
                    y={1.81}
                    key={'business-seat ' + i}
                    listening={rand < 0.5}
                    onMouseEnter={e => {
                        const container = e.target.getStage().container();
                        container.style.cursor = "pointer";
                    }}
                    onMouseLeave={e => {
                        const container = e.target.getStage().container();
                        container.style.cursor = "default";
                    }}
                    onClick={() => {
                        if (seats.length < passengers.length) {
                            setSeats([...seats, {
                                firstName: passengers[seats.length].firstName,
                                lastName: passengers[seats.length].lastName,
                                rowNum,
                                seatLetter: businessSeatLetters[i]
                            }])
                        } else {
                            setSeats([...seats.filter(item => seats.indexOf(item) !== 0), {
                                firstName: seats[0].firstName,
                                lastName: seats[0].lastName,
                                rowNum,
                                seatLetter: businessSeatLetters[i]
                            }])
                        }

                    }}
                    onTap={() => {
                        if (seats.length < passengers.length) {
                            setSeats([...seats, {
                                firstName: passengers[seats.length].firstName,
                                lastName: passengers[seats.length].lastName,
                                rowNum,
                                seatLetter: businessSeatLetters[i]
                            }])
                        } else {
                            setSeats([...seats.filter(item => seats.indexOf(item) !== 0), {
                                firstName: seats[0].firstName,
                                lastName: seats[0].lastName,
                                rowNum,
                                seatLetter: businessSeatLetters[i]
                            }])
                        }

                    }}
                >
                    <Rect
                        width={13.6}
                        height={18.13}
                        cornerRadius={1.81}
                        fillLinearGradientStartPointY={0}
                        fillLinearGradientEndPointY={18.13}
                        fillLinearGradientColorStops={seats.filter(seat => seat.rowNum === rowNum && seat.seatLetter === businessSeatLetters[i])[0] ? [0, "red", 1, "red"] : (rand < 0.5 ? [0, "#5CD6C0", 1, "#22C3A6"] : [0, "#E9E8FC", 1, "#E9E8FC"])}
                        key={'business-seat-rect ' + i} />
                    <Text
                        width={13.6}
                        height={18.13}
                        text={businessSeatLetters[i]}
                        fontFamily='Roboto'
                        fontSize={7}
                        fill={rand < 0.5 ? 'charcoal' : 'darkgray'}
                        align='center'
                        verticalAlign='middle'
                        key={'business-seat-num ' + i} />
                </Group>
            )
        }

        return businessRow
    }

    const businessSection = []

    for (let i = 0; i < 5; i++) {
        businessSection.push(
            <Group
                y={5.44 + (5.44 * i) + (21.76 * i)}
                width={90.65}
                height={21.76}
                key={'business-row ' + i}>
                {getBusinessRow(random[i].toString(), (i + 1))}

                <Text
                    x={38.52}
                    y={4}
                    width={13.6}
                    height={14.5}
                    text={(i + 1).toString()}
                    fontFamily='Roboto'
                    fontSize={7}
                    fill='#7C8DB0'
                    align='center'
                    verticalAlign='middle'
                    key={'business-row-num ' + i} />
            </Group>
        )
    }

    //end of business class

    //start of economy class
    const getEconomyRow = (seed, rowNum) => {
        const economySeatLetters = ['A', 'B', 'C', '', 'D', 'E', 'F']
        const economyRow = []
        let rand

        for (let i = 0; i < 7; i++) {
            rand = seedrandom(seed + i.toString())()

            economyRow.push(
                i !== 3 &&
                <Group
                    x={i < 3 ? 1.81 + (1.81 * i) + (9.97 * i) : 1.81 + (1.81 * i) + 13.6 + 1.81 + (9.97 * (i - 1))}
                    y={1.81}
                    key={'economy-seat ' + i}
                    listening={rand < 0.5}
                    onMouseEnter={e => {
                        const container = e.target.getStage().container();
                        container.style.cursor = "pointer";
                    }}
                    onMouseLeave={e => {
                        const container = e.target.getStage().container();
                        container.style.cursor = "default";
                    }}
                    onClick={() => {
                        if (seats.length < passengers.length) {
                            setSeats([...seats, {
                                firstName: passengers[seats.length].firstName,
                                lastName: passengers[seats.length].lastName,
                                rowNum,
                                seatLetter: economySeatLetters[i]
                            }])
                        } else {
                            setSeats([...seats.filter(item => seats.indexOf(item) !== 0), {
                                firstName: seats[0].firstName,
                                lastName: seats[0].lastName,
                                rowNum,
                                seatLetter: economySeatLetters[i]
                            }])
                        }

                    }}
                    onTap={() => {
                        if (seats.length < passengers.length) {
                            setSeats([...seats, {
                                firstName: passengers[seats.length].firstName,
                                lastName: passengers[seats.length].lastName,
                                rowNum,
                                seatLetter: economySeatLetters[i]
                            }])
                        } else {
                            setSeats([...seats.filter(item => seats.indexOf(item) !== 0), {
                                firstName: seats[0].firstName,
                                lastName: seats[0].lastName,
                                rowNum,
                                seatLetter: economySeatLetters[i]
                            }])
                        }

                    }}
                >
                    <Rect
                        width={9.97}
                        height={14.5}
                        cornerRadius={1.81}
                        fillLinearGradientStartPointY={0}
                        fillLinearGradientEndPointY={14.5}
                        fillLinearGradientColorStops={seats.filter(seat => seat.rowNum === rowNum && seat.seatLetter === economySeatLetters[i])[0] ? [0, "red", 1, "red"] : (rand < 0.5 ? [0, "#605DEC", 1, "#2A26D9"] : [0, "#E9E8FC", 1, "#E9E8FC"])}
                        key={'economy-seat-rect ' + i} />
                    <Text
                        width={9.97}
                        height={14.5}
                        text={economySeatLetters[i]}
                        fontFamily='Roboto'
                        fontSize={6}
                        fill='darkgray'
                        align='center'
                        verticalAlign='middle'
                        key={'economy-seat-num ' + i} />
                </Group>
            )
        }

        return economyRow
    }

    //start of economy part 1

    const economyFirstSection = [
        <Group
            width={90.6462}
            height={8.15816}>
            <Path
                data='M12.3715 5.83008V1.99574H14.8516V2.4526H12.9153V3.65457H14.7373V4.11143H12.9153V5.37322H14.8516V5.83008H12.3715ZM15.1608 5.83008L16.2649 4.45951L15.2315 3.17596H15.8733L16.5858 4.08423L17.2983 3.17596H17.9401L16.9012 4.46495L18.0108 5.83008H17.3581L16.5804 4.8511L15.8081 5.83008H15.1608ZM18.3707 2.56137V1.9903H19.0125V2.56137H18.3707ZM18.4196 5.83008V3.17596H18.969V5.83008H18.4196ZM20.8734 5.87903C20.5398 5.87903 20.2915 5.79382 20.1283 5.6234C19.9651 5.45299 19.8836 5.20643 19.8836 4.88373V3.60018H19.3669V3.17596H19.8836V2.37646H20.4329V3.17596H21.2541V3.60018H20.4329V4.84022C20.4329 5.03239 20.4728 5.17743 20.5525 5.27532C20.6359 5.37322 20.7701 5.42217 20.955 5.42217C21.013 5.42217 21.0692 5.41673 21.1236 5.40585C21.178 5.39135 21.2324 5.37503 21.2868 5.3569L21.3738 5.77025C21.3194 5.80288 21.2433 5.82827 21.1454 5.84639C21.0511 5.86815 20.9604 5.87903 20.8734 5.87903ZM23.1573 5.83008V3.17596H23.6903V3.64913C23.8281 3.33368 24.1145 3.15783 24.5496 3.12157L24.7291 3.11069L24.7672 3.57843L24.4354 3.61106C23.9532 3.65819 23.7121 3.90656 23.7121 4.35617V5.83008H23.1573ZM26.3021 5.87903C26.0338 5.87903 25.8017 5.82283 25.6059 5.71043C25.4101 5.59802 25.2578 5.4403 25.1491 5.23725C25.0439 5.03058 24.9913 4.78583 24.9913 4.50302C24.9913 4.2202 25.0439 3.97727 25.1491 3.77422C25.2578 3.56755 25.4101 3.40801 25.6059 3.29561C25.8017 3.18321 26.0338 3.12701 26.3021 3.12701C26.5631 3.12701 26.7916 3.18321 26.9874 3.29561C27.1832 3.40801 27.3354 3.56755 27.4442 3.77422C27.553 3.97727 27.6074 4.2202 27.6074 4.50302C27.6074 4.78583 27.553 5.03058 27.4442 5.23725C27.3354 5.4403 27.1832 5.59802 26.9874 5.71043C26.7916 5.82283 26.5631 5.87903 26.3021 5.87903ZM26.3021 5.4548C26.5269 5.4548 26.7082 5.37322 26.846 5.21006C26.9837 5.04689 27.0526 4.81121 27.0526 4.50302C27.0526 4.19482 26.9837 3.96095 26.846 3.80142C26.7082 3.63825 26.5269 3.55667 26.3021 3.55667C26.0737 3.55667 25.8905 3.63825 25.7528 3.80142C25.615 3.96095 25.5461 4.19482 25.5461 4.50302C25.5461 4.81121 25.615 5.04689 25.7528 5.21006C25.8905 5.37322 26.0737 5.4548 26.3021 5.4548ZM28.8944 5.83008L27.8828 3.17596H28.4484L29.1609 5.1883L29.8952 3.17596H30.3194L31.0427 5.19918L31.7661 3.17596H32.3045L31.2929 5.83008H30.7926L30.091 3.93195L29.3948 5.83008H28.8944'
                fill="#7C8DB0" />
            <Circle
                x={6.2189}
                y={4.4562}
                radius={2.71939}
                stroke="#7C8DB0"
                strokeWidth={0.679847} />
            <Path
                data='M6.219 3.85158C6.4276 3.85158 6.59669 3.68248 6.59669 3.47388C6.59669 3.26529 6.4276 3.09619 6.219 3.09619C6.01041 3.09619 5.84131 3.26529 5.84131 3.47388C5.84131 3.68248 6.01041 3.85158 6.219 3.85158ZM6.55883 4.45603C6.55883 4.2683 6.40664 4.11611 6.21891 4.11611C6.03117 4.11611 5.87899 4.2683 5.87899 4.45603V5.51357C5.87899 5.70131 6.03117 5.8535 6.21891 5.8535C6.40664 5.8535 6.55883 5.70131 6.55883 5.51357V4.45603Z'
                fill="#7C8DB0" />
        </Group>
    ]

    for (let i = 0; i < 8; i++) {
        economyFirstSection.push(
            <Group
                y={9.97 + (18.13 * i) + (1.81 * i)}
                width={90.65}
                height={18.13}
                key={'economy-1-row ' + i}>
                {getEconomyRow(random[i].toString(), (i + 6))}

                <Text
                    x={38.52}
                    y={2}
                    width={13.6}
                    height={14.5}
                    text={(i + 6).toString()}
                    fontFamily='Roboto'
                    fontSize={7}
                    fill='#7C8DB0'
                    align='center'
                    verticalAlign='middle'
                    key={'economy-1-row-num ' + i} />
            </Group>
        )
    }

    //end of economy part 1

    //start of economy part 2

    const economySecondSection = [
        <Group
            width={90.6462}
            height={8.15816}
            y={1.81}>
            <Path
                data='M12.3715 5.83008V1.99574H14.8516V2.4526H12.9153V3.65457H14.7373V4.11143H12.9153V5.37322H14.8516V5.83008H12.3715ZM15.1608 5.83008L16.2649 4.45951L15.2315 3.17596H15.8733L16.5858 4.08423L17.2983 3.17596H17.9401L16.9012 4.46495L18.0108 5.83008H17.3581L16.5804 4.8511L15.8081 5.83008H15.1608ZM18.3707 2.56137V1.9903H19.0125V2.56137H18.3707ZM18.4196 5.83008V3.17596H18.969V5.83008H18.4196ZM20.8734 5.87903C20.5398 5.87903 20.2915 5.79382 20.1283 5.6234C19.9651 5.45299 19.8836 5.20643 19.8836 4.88373V3.60018H19.3669V3.17596H19.8836V2.37646H20.4329V3.17596H21.2541V3.60018H20.4329V4.84022C20.4329 5.03239 20.4728 5.17743 20.5525 5.27532C20.6359 5.37322 20.7701 5.42217 20.955 5.42217C21.013 5.42217 21.0692 5.41673 21.1236 5.40585C21.178 5.39135 21.2324 5.37503 21.2868 5.3569L21.3738 5.77025C21.3194 5.80288 21.2433 5.82827 21.1454 5.84639C21.0511 5.86815 20.9604 5.87903 20.8734 5.87903ZM23.1573 5.83008V3.17596H23.6903V3.64913C23.8281 3.33368 24.1145 3.15783 24.5496 3.12157L24.7291 3.11069L24.7672 3.57843L24.4354 3.61106C23.9532 3.65819 23.7121 3.90656 23.7121 4.35617V5.83008H23.1573ZM26.3021 5.87903C26.0338 5.87903 25.8017 5.82283 25.6059 5.71043C25.4101 5.59802 25.2578 5.4403 25.1491 5.23725C25.0439 5.03058 24.9913 4.78583 24.9913 4.50302C24.9913 4.2202 25.0439 3.97727 25.1491 3.77422C25.2578 3.56755 25.4101 3.40801 25.6059 3.29561C25.8017 3.18321 26.0338 3.12701 26.3021 3.12701C26.5631 3.12701 26.7916 3.18321 26.9874 3.29561C27.1832 3.40801 27.3354 3.56755 27.4442 3.77422C27.553 3.97727 27.6074 4.2202 27.6074 4.50302C27.6074 4.78583 27.553 5.03058 27.4442 5.23725C27.3354 5.4403 27.1832 5.59802 26.9874 5.71043C26.7916 5.82283 26.5631 5.87903 26.3021 5.87903ZM26.3021 5.4548C26.5269 5.4548 26.7082 5.37322 26.846 5.21006C26.9837 5.04689 27.0526 4.81121 27.0526 4.50302C27.0526 4.19482 26.9837 3.96095 26.846 3.80142C26.7082 3.63825 26.5269 3.55667 26.3021 3.55667C26.0737 3.55667 25.8905 3.63825 25.7528 3.80142C25.615 3.96095 25.5461 4.19482 25.5461 4.50302C25.5461 4.81121 25.615 5.04689 25.7528 5.21006C25.8905 5.37322 26.0737 5.4548 26.3021 5.4548ZM28.8944 5.83008L27.8828 3.17596H28.4484L29.1609 5.1883L29.8952 3.17596H30.3194L31.0427 5.19918L31.7661 3.17596H32.3045L31.2929 5.83008H30.7926L30.091 3.93195L29.3948 5.83008H28.8944'
                fill="#7C8DB0" />
            <Circle
                x={6.2189}
                y={4.4562}
                radius={2.71939}
                stroke="#7C8DB0"
                strokeWidth={0.679847} />
            <Path
                data='M6.219 3.85158C6.4276 3.85158 6.59669 3.68248 6.59669 3.47388C6.59669 3.26529 6.4276 3.09619 6.219 3.09619C6.01041 3.09619 5.84131 3.26529 5.84131 3.47388C5.84131 3.68248 6.01041 3.85158 6.219 3.85158ZM6.55883 4.45603C6.55883 4.2683 6.40664 4.11611 6.21891 4.11611C6.03117 4.11611 5.87899 4.2683 5.87899 4.45603V5.51357C5.87899 5.70131 6.03117 5.8535 6.21891 5.8535C6.40664 5.8535 6.55883 5.70131 6.55883 5.51357V4.45603Z'
                fill="#7C8DB0" />
        </Group>
    ]

    for (let i = 0; i < 5; i++) {
        economySecondSection.push(
            <Group
                y={11.1 + (18.13 * i) + (1.81 * i)}
                width={90.65}
                height={18.13}
                key={'economy-2-row ' + i}>
                {getEconomyRow(random[i].toString(), (i + 14))}

                <Text
                    x={38.52}
                    y={2}
                    width={13.6}
                    height={14.5}
                    text={(i + 14).toString()}
                    fontFamily='Roboto'
                    fontSize={7}
                    fill='#7C8DB0'
                    align='center'
                    verticalAlign='middle'
                    key={'economy-2-row-num ' + i} />
            </Group>
        )
    }

    //end of economy part 2

    //start of economy part 3

    const economyThirdSection = [
        <Group
            width={90.6462}
            height={8.15816}
            y={1.81}>
            <Path
                data='M12.3715 5.83008V1.99574H14.8516V2.4526H12.9153V3.65457H14.7373V4.11143H12.9153V5.37322H14.8516V5.83008H12.3715ZM15.1608 5.83008L16.2649 4.45951L15.2315 3.17596H15.8733L16.5858 4.08423L17.2983 3.17596H17.9401L16.9012 4.46495L18.0108 5.83008H17.3581L16.5804 4.8511L15.8081 5.83008H15.1608ZM18.3707 2.56137V1.9903H19.0125V2.56137H18.3707ZM18.4196 5.83008V3.17596H18.969V5.83008H18.4196ZM20.8734 5.87903C20.5398 5.87903 20.2915 5.79382 20.1283 5.6234C19.9651 5.45299 19.8836 5.20643 19.8836 4.88373V3.60018H19.3669V3.17596H19.8836V2.37646H20.4329V3.17596H21.2541V3.60018H20.4329V4.84022C20.4329 5.03239 20.4728 5.17743 20.5525 5.27532C20.6359 5.37322 20.7701 5.42217 20.955 5.42217C21.013 5.42217 21.0692 5.41673 21.1236 5.40585C21.178 5.39135 21.2324 5.37503 21.2868 5.3569L21.3738 5.77025C21.3194 5.80288 21.2433 5.82827 21.1454 5.84639C21.0511 5.86815 20.9604 5.87903 20.8734 5.87903ZM23.1573 5.83008V3.17596H23.6903V3.64913C23.8281 3.33368 24.1145 3.15783 24.5496 3.12157L24.7291 3.11069L24.7672 3.57843L24.4354 3.61106C23.9532 3.65819 23.7121 3.90656 23.7121 4.35617V5.83008H23.1573ZM26.3021 5.87903C26.0338 5.87903 25.8017 5.82283 25.6059 5.71043C25.4101 5.59802 25.2578 5.4403 25.1491 5.23725C25.0439 5.03058 24.9913 4.78583 24.9913 4.50302C24.9913 4.2202 25.0439 3.97727 25.1491 3.77422C25.2578 3.56755 25.4101 3.40801 25.6059 3.29561C25.8017 3.18321 26.0338 3.12701 26.3021 3.12701C26.5631 3.12701 26.7916 3.18321 26.9874 3.29561C27.1832 3.40801 27.3354 3.56755 27.4442 3.77422C27.553 3.97727 27.6074 4.2202 27.6074 4.50302C27.6074 4.78583 27.553 5.03058 27.4442 5.23725C27.3354 5.4403 27.1832 5.59802 26.9874 5.71043C26.7916 5.82283 26.5631 5.87903 26.3021 5.87903ZM26.3021 5.4548C26.5269 5.4548 26.7082 5.37322 26.846 5.21006C26.9837 5.04689 27.0526 4.81121 27.0526 4.50302C27.0526 4.19482 26.9837 3.96095 26.846 3.80142C26.7082 3.63825 26.5269 3.55667 26.3021 3.55667C26.0737 3.55667 25.8905 3.63825 25.7528 3.80142C25.615 3.96095 25.5461 4.19482 25.5461 4.50302C25.5461 4.81121 25.615 5.04689 25.7528 5.21006C25.8905 5.37322 26.0737 5.4548 26.3021 5.4548ZM28.8944 5.83008L27.8828 3.17596H28.4484L29.1609 5.1883L29.8952 3.17596H30.3194L31.0427 5.19918L31.7661 3.17596H32.3045L31.2929 5.83008H30.7926L30.091 3.93195L29.3948 5.83008H28.8944'
                fill="#7C8DB0" />
            <Circle
                x={6.2189}
                y={4.4562}
                radius={2.71939}
                stroke="#7C8DB0"
                strokeWidth={0.679847} />
            <Path
                data='M6.219 3.85158C6.4276 3.85158 6.59669 3.68248 6.59669 3.47388C6.59669 3.26529 6.4276 3.09619 6.219 3.09619C6.01041 3.09619 5.84131 3.26529 5.84131 3.47388C5.84131 3.68248 6.01041 3.85158 6.219 3.85158ZM6.55883 4.45603C6.55883 4.2683 6.40664 4.11611 6.21891 4.11611C6.03117 4.11611 5.87899 4.2683 5.87899 4.45603V5.51357C5.87899 5.70131 6.03117 5.8535 6.21891 5.8535C6.40664 5.8535 6.55883 5.70131 6.55883 5.51357V4.45603Z'
                fill="#7C8DB0" />
        </Group>
    ]

    for (let i = 0; i < 10; i++) {
        economyThirdSection.push(
            <Group
                y={11.1 + (18.13 * i) + (1.81 * i)}
                width={90.65}
                height={18.13}
                key={'economy-3-row ' + i}>
                {getEconomyRow(random[i].toString(), (i + 19))}

                <Text
                    x={38.52}
                    y={2}
                    width={13.6}
                    height={14.5}
                    text={(i + 19).toString()}
                    fontFamily='Roboto'
                    fontSize={7}
                    fill='#7C8DB0'
                    align='center'
                    verticalAlign='middle'
                    key={'economy-3-row ' + i} />
            </Group>
        )
    }

    //end of economy part 3

    //start of economy part 4

    const economyFourthSection = [
        <Group
            width={90.6462}
            height={8.15816}
            y={1.81}>
            <Path
                data='M12.3715 5.83008V1.99574H14.8516V2.4526H12.9153V3.65457H14.7373V4.11143H12.9153V5.37322H14.8516V5.83008H12.3715ZM15.1608 5.83008L16.2649 4.45951L15.2315 3.17596H15.8733L16.5858 4.08423L17.2983 3.17596H17.9401L16.9012 4.46495L18.0108 5.83008H17.3581L16.5804 4.8511L15.8081 5.83008H15.1608ZM18.3707 2.56137V1.9903H19.0125V2.56137H18.3707ZM18.4196 5.83008V3.17596H18.969V5.83008H18.4196ZM20.8734 5.87903C20.5398 5.87903 20.2915 5.79382 20.1283 5.6234C19.9651 5.45299 19.8836 5.20643 19.8836 4.88373V3.60018H19.3669V3.17596H19.8836V2.37646H20.4329V3.17596H21.2541V3.60018H20.4329V4.84022C20.4329 5.03239 20.4728 5.17743 20.5525 5.27532C20.6359 5.37322 20.7701 5.42217 20.955 5.42217C21.013 5.42217 21.0692 5.41673 21.1236 5.40585C21.178 5.39135 21.2324 5.37503 21.2868 5.3569L21.3738 5.77025C21.3194 5.80288 21.2433 5.82827 21.1454 5.84639C21.0511 5.86815 20.9604 5.87903 20.8734 5.87903ZM23.1573 5.83008V3.17596H23.6903V3.64913C23.8281 3.33368 24.1145 3.15783 24.5496 3.12157L24.7291 3.11069L24.7672 3.57843L24.4354 3.61106C23.9532 3.65819 23.7121 3.90656 23.7121 4.35617V5.83008H23.1573ZM26.3021 5.87903C26.0338 5.87903 25.8017 5.82283 25.6059 5.71043C25.4101 5.59802 25.2578 5.4403 25.1491 5.23725C25.0439 5.03058 24.9913 4.78583 24.9913 4.50302C24.9913 4.2202 25.0439 3.97727 25.1491 3.77422C25.2578 3.56755 25.4101 3.40801 25.6059 3.29561C25.8017 3.18321 26.0338 3.12701 26.3021 3.12701C26.5631 3.12701 26.7916 3.18321 26.9874 3.29561C27.1832 3.40801 27.3354 3.56755 27.4442 3.77422C27.553 3.97727 27.6074 4.2202 27.6074 4.50302C27.6074 4.78583 27.553 5.03058 27.4442 5.23725C27.3354 5.4403 27.1832 5.59802 26.9874 5.71043C26.7916 5.82283 26.5631 5.87903 26.3021 5.87903ZM26.3021 5.4548C26.5269 5.4548 26.7082 5.37322 26.846 5.21006C26.9837 5.04689 27.0526 4.81121 27.0526 4.50302C27.0526 4.19482 26.9837 3.96095 26.846 3.80142C26.7082 3.63825 26.5269 3.55667 26.3021 3.55667C26.0737 3.55667 25.8905 3.63825 25.7528 3.80142C25.615 3.96095 25.5461 4.19482 25.5461 4.50302C25.5461 4.81121 25.615 5.04689 25.7528 5.21006C25.8905 5.37322 26.0737 5.4548 26.3021 5.4548ZM28.8944 5.83008L27.8828 3.17596H28.4484L29.1609 5.1883L29.8952 3.17596H30.3194L31.0427 5.19918L31.7661 3.17596H32.3045L31.2929 5.83008H30.7926L30.091 3.93195L29.3948 5.83008H28.8944'
                fill="#7C8DB0" />
            <Circle
                x={6.2189}
                y={4.4562}
                radius={2.71939}
                stroke="#7C8DB0"
                strokeWidth={0.679847} />
            <Path
                data='M6.219 3.85158C6.4276 3.85158 6.59669 3.68248 6.59669 3.47388C6.59669 3.26529 6.4276 3.09619 6.219 3.09619C6.01041 3.09619 5.84131 3.26529 5.84131 3.47388C5.84131 3.68248 6.01041 3.85158 6.219 3.85158ZM6.55883 4.45603C6.55883 4.2683 6.40664 4.11611 6.21891 4.11611C6.03117 4.11611 5.87899 4.2683 5.87899 4.45603V5.51357C5.87899 5.70131 6.03117 5.8535 6.21891 5.8535C6.40664 5.8535 6.55883 5.70131 6.55883 5.51357V4.45603Z'
                fill="#7C8DB0" />
        </Group>
    ]

    for (let i = 0; i < 5; i++) {
        economyFourthSection.push(
            <Group
                y={11.1 + (18.13 * i) + (1.81 * i)}
                width={90.65}
                height={18.13}
                key={'economy-4-row ' + i}>
                {getEconomyRow(random[i].toString(), (i + 29))}

                <Text
                    x={38.52}
                    y={2}
                    width={13.6}
                    height={14.5}
                    text={(i + 29).toString()}
                    fontFamily='Roboto'
                    fontSize={7}
                    fill='#7C8DB0'
                    align='center'
                    verticalAlign='middle'
                    key={'economy-4-row ' + i} />
            </Group>
        )
    }

    //end of economy part 4

    //end of economy class

    return (
        <Stage
            width={963}
            height={1177}
            offsetY={-75}
            draggable>
            <Layer>
                <Path
                    data='M651.664 458.785C653.004 469.147 655.146 487.306 655.146 497.421V497.423C655.146 512.142 655.146 536.006 642.469 570.994C639.008 580.546 633.689 591.299 629.231 599.669C627.003 603.852 624.991 607.439 623.537 609.979C622.81 611.249 622.222 612.257 621.816 612.948C621.639 613.248 621.497 613.489 621.393 613.664C621.359 613.6 621.321 613.528 621.279 613.447C621.205 613.305 621.117 613.136 621.017 612.943C620.653 612.243 620.124 611.221 619.465 609.936C618.148 607.367 616.312 603.745 614.239 599.537C610.092 591.121 604.996 580.362 601.195 570.986C587.614 537.488 587.614 518.259 587.614 497.425V497.421C587.614 483.584 589.614 467.64 590.956 458.497C591.578 454.261 595.233 451.192 599.521 451.192H621.38H642.978C647.377 451.192 651.101 454.426 651.664 458.785Z'
                    fill='#EAEBFF' />
                <Path
                    data='M310.999 458.785C309.66 469.147 307.517 487.306 307.517 497.421V497.423C307.517 512.142 307.517 536.006 320.194 570.994C323.655 580.546 328.975 591.299 333.432 599.669C335.66 603.852 337.672 607.439 339.126 609.979C339.853 611.249 340.441 612.257 340.847 612.948C341.024 613.248 341.166 613.489 341.27 613.664C341.304 613.6 341.342 613.528 341.384 613.447C341.458 613.305 341.546 613.136 341.646 612.943C342.011 612.243 342.54 611.221 343.198 609.936C344.515 607.367 346.351 603.745 348.424 599.537C352.571 591.121 357.667 580.362 361.468 570.986C375.049 537.488 375.049 518.259 375.049 497.425V497.421C375.049 483.584 373.049 467.64 371.707 458.497C371.085 454.261 367.43 451.192 363.142 451.192H341.283H319.685C315.286 451.192 311.562 454.426 310.999 458.785Z'
                    fill='#EAEBFF' />
                <Path
                    data='M467.211 1124.47L277.217 1176.08C275.996 1169.96 275.854 1165.2 276.175 1161.75C276.496 1158.29 277.278 1156.14 277.885 1155.22L446.014 1043.75L446.15 1043.66L446.108 1043.51L438.869 1016.04C438.619 1015.09 438.394 1014.18 438.182 1013.22C435.953 1003.21 422.638 941.621 422.638 900.344V671.915V671.689H422.411H341.677C337.147 671.689 332.712 672.343 328.38 673.673C224.822 705.467 30.3226 765.351 3.10423 774.378C1.8654 774.788 0.631088 773.932 0.517531 772.612C-2.03932 742.898 12.8816 725.469 20.8719 720.38C20.8741 720.378 20.8764 720.377 20.8787 720.375L375.553 527.032L375.564 527.026L375.575 527.019L402.564 508.187C406.176 505.667 409.404 502.636 412.146 499.189L422.911 485.657C423.581 484.815 423.945 483.771 423.945 482.695V452.778V202.606C423.945 197.484 424.378 192.377 425.269 187.334C428.316 170.077 436.086 127.125 443.027 97.4964C447.673 77.6659 453.507 53.3153 460.074 33.9234C463.359 24.2261 466.823 15.7813 470.408 9.76487C472.201 6.75635 474.017 4.36566 475.849 2.72949C477.68 1.09325 479.509 0.226616 481.331 0.226616C483.154 0.226616 484.993 1.10005 486.842 2.74825C488.691 4.39617 490.532 6.80306 492.351 9.82936C495.989 15.8813 499.517 24.3687 502.844 34.094C509.496 53.5417 515.329 77.8923 519.635 97.4933C526.114 126.993 534.047 169.469 537.263 186.952C538.239 192.255 538.718 197.622 538.718 203.014V452.778V482.695C538.718 483.771 539.082 484.815 539.752 485.657L550.517 499.189C553.259 502.636 556.487 505.667 560.099 508.187L587.088 527.019L587.099 527.026L587.11 527.032L941.784 720.375C941.787 720.377 941.789 720.378 941.791 720.38C949.781 725.469 964.702 742.898 962.145 772.613C962.032 773.932 960.798 774.789 959.559 774.378C932.342 765.351 737.84 705.467 634.282 673.672C629.951 672.342 625.517 671.689 620.987 671.689H540.252H540.025V671.915V900.344C540.025 941.621 526.71 1003.21 524.481 1013.22C524.269 1014.18 524.044 1015.09 523.794 1016.04L516.555 1043.51L516.513 1043.66L516.648 1043.75L684.107 1155.22C684.715 1156.14 685.497 1158.29 685.818 1161.75C686.138 1165.2 685.997 1169.96 684.776 1176.08L495.453 1124.47L495.232 1124.41L495.174 1124.64L493.577 1130.7L493.576 1130.7L493.576 1130.7L493.574 1130.71L493.564 1130.74L493.548 1130.8L493.526 1130.88C493.505 1130.95 493.479 1131.04 493.446 1131.15C493.424 1131.22 493.4 1131.3 493.373 1131.39C493.237 1131.84 493.033 1132.47 492.764 1133.24C492.226 1134.77 491.425 1136.8 490.375 1138.84C489.325 1140.87 488.031 1142.9 486.509 1144.41C484.988 1145.92 483.258 1146.9 481.331 1146.9C479.405 1146.9 477.675 1145.92 476.154 1144.41C474.632 1142.9 473.338 1140.87 472.288 1138.84C471.238 1136.8 470.437 1134.77 469.899 1133.24C469.63 1132.47 469.426 1131.84 469.29 1131.39C469.222 1131.17 469.171 1131 469.137 1130.88C469.12 1130.82 469.107 1130.77 469.099 1130.74L469.089 1130.71L469.087 1130.7L469.087 1130.7L467.489 1124.64L467.431 1124.41L467.211 1124.47Z'
                    fillLinearGradientStartPointX={0}
                    fillLinearGradientEndPointX={963}
                    fillLinearGradientColorStops={[0, "#99BBFF", 0.4896, "#CCCCFF", 1, "#99BBFF"]} />
                <Path
                    data='M447.327 114.631L452.894 102.385C454.365 99.1492 457.591 97.0715 461.146 97.0715H477.744C478.745 97.0715 479.557 97.8832 479.557 98.8845V112.714C479.557 113.715 478.745 114.524 477.744 114.55C472.154 114.694 468.79 115.494 462.901 116.107C459.647 116.446 457.882 116.662 454.572 117.014C452.845 117.197 450.587 117.185 448.858 117.133C447.593 117.096 446.803 115.784 447.327 114.631Z'
                    fill='#FFFFFF3D' />
                <Path
                    data='M515.185 114.631L509.619 102.385C508.148 99.1492 504.922 97.0715 501.367 97.0715H484.769C483.768 97.0715 482.956 97.8832 482.956 98.8845V112.714C482.956 113.715 483.768 114.524 484.769 114.55C490.358 114.694 493.723 115.494 499.612 116.107C502.866 116.446 504.63 116.662 507.94 117.014C509.668 117.197 511.925 117.185 513.654 117.133C514.92 117.096 515.709 115.784 515.185 114.631Z'
                    fill='#FFFFFF3D' />
                <Path
                    data='M431.929 196.249C431.929 196.249 431.929 195.116 442.992 137.329C445.657 123.405 467.092 123.732 481.331 123.732C495.571 123.732 517.006 123.405 519.671 137.329C530.734 195.116 530.734 196.249 530.734 196.249V944.987C530.734 944.987 530.734 944.987 524.204 972.294C520.903 986.098 481.331 986.004 481.331 986.004C481.331 986.004 441.76 986.098 438.459 972.294C431.929 944.987 431.929 944.987 431.929 944.987V196.249Z'
                    fill='#FFFFFF99' />
                <Rect
                    x={436}
                    y={195}
                    width={90.6462}
                    height={141.408}
                    cornerRadius={3.62585}
                    fill="white" />
                <Rect
                    x={436}
                    y={345}
                    width={90.6462}
                    height={603}
                    cornerRadius={3.62585}
                    fill="white" />
                <Group
                    x={436}
                    y={195}>
                    {businessSection}
                </Group>
                <Group
                    x={436}
                    y={343.66}>
                    <Group
                        y={3.63}>
                        {economyFirstSection}
                    </Group>
                    <Group
                        y={170.63}>
                        {economySecondSection}
                    </Group>
                    <Group
                        y={282.82}>
                        {economyThirdSection}
                    </Group>
                    <Group
                        y={492.21}>
                        {economyFourthSection}
                    </Group>
                </Group>
            </Layer>
        </Stage>
    )
}

export default SeatsRender
